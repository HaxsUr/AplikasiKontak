import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.io.FileWriter;
import java.io.BufferedWriter;
import javax.swing.JFileChooser;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFileChooser;
public class AplikasiKontak extends javax.swing.JFrame {

    /**
     * Creates new form AplikasiKontak
     */
    public AplikasiKontak() {
        initComponents();
        loadTable();
    tableKontak.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tableKontakMouseClicked(evt);
        }
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buttonSimpan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableKontak = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        textNama = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listKerja = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textAlamat = new javax.swing.JTextField();
        textNomor = new javax.swing.JTextField();
        textIbu = new javax.swing.JTextField();
        boxKategori = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonExport = new javax.swing.JButton();
        buttonImport = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textCari = new javax.swing.JTextField();
        buttonCari = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setText("APLIKASI KONTAK");

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));

        buttonSimpan.setText("Simpan");
        buttonSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanActionPerformed(evt);
            }
        });

        tableKontak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableKontak.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableKontakMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableKontak);

        jLabel2.setText("Nama");

        listKerja.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Wirausaha", "Kantor", "Wiraswasta", "Guru", "Dosen", "Mahasiswa" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listKerja);

        jLabel3.setText("Alamat");

        jLabel4.setText("No. Telp");

        jLabel5.setText("Nama Ibu");

        jLabel6.setText("Pekerjaan");

        textAlamat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAlamatKeyTyped(evt);
            }
        });

        textNomor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textNomorKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textNomorKeyTyped(evt);
            }
        });

        boxKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nama", "Alamat", "No. Telp", "Nama Ibu", "Pekerjaan" }));

        jLabel7.setText("Pilih Kategori");

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonExport.setText("Export");
        buttonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportActionPerformed(evt);
            }
        });

        buttonImport.setText("Import");
        buttonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportActionPerformed(evt);
            }
        });

        jButton6.setText("Keluar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel8.setText("Pencarian");

        textCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCariActionPerformed(evt);
            }
        });

        buttonCari.setText("Cari");
        buttonCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCariActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonSimpan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel6))
                    .addComponent(textAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNomor, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(boxKategori, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textIbu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(14, 14, 14)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonCari)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClear)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(textCari, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(textNomor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(textIbu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(12, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(textCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSimpan)
                    .addComponent(buttonEdit)
                    .addComponent(buttonDelete)
                    .addComponent(buttonExport)
                    .addComponent(buttonImport)
                    .addComponent(jButton6)
                    .addComponent(buttonCari)
                    .addComponent(buttonClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        private void loadTable() {
        try (Connection conn = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM kontak";
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nama");
            model.addColumn("Alamat");
            model.addColumn("No. Telp");
            model.addColumn("Nama Ibu");
            model.addColumn("Pekerjaan");
            model.addColumn("Kategori");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nama"),
                    rs.getString("alamat"),
                    rs.getString("no_telp"),
                    rs.getString("nama_ibu"),
                    rs.getString("pekerjaan"),
                    rs.getString("kategori")
                });
            }

            tableKontak.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private void clearFields() {
    textNama.setText("");
    textAlamat.setText("");
    textNomor.setText("");
    textIbu.setText("");
    listKerja.clearSelection(); // Mengosongkan pilihan pekerjaan
    boxKategori.setSelectedIndex(0); // Mengembalikan kategori ke pilihan pertama
}


private void simpanData() {
    try (Connection conn = DatabaseConnection.getConnection()) {
        String query = "INSERT INTO kontak (nama, alamat, no_telp, nama_ibu, pekerjaan, kategori) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, textNama.getText());
        ps.setString(2, textAlamat.getText());
        ps.setString(3, textNomor.getText());
        ps.setString(4, textIbu.getText());
        ps.setString(5, listKerja.getSelectedValue());
        ps.setString(6, boxKategori.getSelectedItem().toString());

        ps.executeUpdate();
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan.");
        loadTable();
        clearFields(); // Mengosongkan textfield
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
    }
}


    private void editData() {
        int selectedRow = tableKontak.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih data yang ingin diubah.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            String query = "UPDATE kontak SET nama=?, alamat=?, no_telp=?, nama_ibu=?, pekerjaan=?, kategori=? WHERE id=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, textNama.getText());
            ps.setString(2, textAlamat.getText());
            ps.setString(3, textNomor.getText());
            ps.setString(4, textIbu.getText());
            ps.setString(5, listKerja.getSelectedValue());
            ps.setString(6, boxKategori.getSelectedItem().toString());
            ps.setInt(7, Integer.parseInt(tableKontak.getValueAt(selectedRow, 0).toString()));

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil diubah.");
            loadTable();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
        }
    }

    private void hapusData() {
        int selectedRow = tableKontak.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            String query = "DELETE FROM kontak WHERE id=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, Integer.parseInt(tableKontak.getValueAt(selectedRow, 0).toString()));

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus.");
            loadTable();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
        }
    }
    
private void cariData() {
    String keyword = textCari.getText().trim();

    if (keyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk pencarian!");
        return;
    }

    try (Connection conn = DatabaseConnection.getConnection()) {
        // Query untuk memeriksa semua kolom yang relevan
        String query = "SELECT * FROM kontak WHERE " +
                       "nama LIKE ? OR alamat LIKE ? OR no_telp LIKE ? OR " +
                       "nama_ibu LIKE ? OR pekerjaan LIKE ?";
        PreparedStatement ps = conn.prepareStatement(query);

        // Mengatur parameter wildcard untuk setiap kolom
        for (int i = 1; i <= 5; i++) {
            ps.setString(i, "%" + keyword + "%");
        }

        ResultSet rs = ps.executeQuery();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("Alamat");
        model.addColumn("No. Telp");
        model.addColumn("Nama Ibu");
        model.addColumn("Pekerjaan");
        model.addColumn("Kategori");

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("nama"),
                rs.getString("alamat"),
                rs.getString("no_telp"),
                rs.getString("nama_ibu"),
                rs.getString("pekerjaan"),
                rs.getString("kategori")
            });
        }

        tableKontak.setModel(model);

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Data tidak ditemukan.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching data: " + e.getMessage());
    }
}
private void tampilkanSemuaData() {
    try (Connection conn = DatabaseConnection.getConnection()) {
        String query = "SELECT * FROM kontak";
        PreparedStatement ps = conn.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("Alamat");
        model.addColumn("No. Telp");
        model.addColumn("Nama Ibu");
        model.addColumn("Pekerjaan");
        model.addColumn("Kategori");

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("nama"),
                rs.getString("alamat"),
                rs.getString("no_telp"),
                rs.getString("nama_ibu"),
                rs.getString("pekerjaan"),
                rs.getString("kategori")
            });
        }

        tableKontak.setModel(model);

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada data yang tersedia.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
    }
}

private void exportToCSV() {
    // Membuka JFileChooser untuk memilih lokasi penyimpanan file CSV
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save as CSV");
    fileChooser.setSelectedFile(new java.io.File("data.csv"));  // Menentukan nama file default

    int userSelection = fileChooser.showSaveDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        java.io.File fileToSave = fileChooser.getSelectedFile();
        
        try (Connection conn = DatabaseConnection.getConnection();
             BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
            
            // Query untuk mengambil semua data dari tabel kontak
            String query = "SELECT * FROM kontak";
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            // Menulis header kolom ke dalam file CSV
            writer.write("Nama,Alamat,No. Telp,Nama Ibu,Pekerjaan,Kategori");
            writer.newLine();

            // Menulis data baris ke dalam file CSV
            while (rs.next()) {
                writer.write(rs.getString("nama") + ",");
                writer.write(rs.getString("alamat") + ",");
                writer.write(rs.getString("no_telp") + ",");
                writer.write(rs.getString("nama_ibu") + ",");
                writer.write(rs.getString("pekerjaan") + ",");
                writer.write(rs.getString("kategori"));
                writer.newLine();
            }

            JOptionPane.showMessageDialog(this, "Data successfully exported to CSV.");
        } catch (SQLException | IOException e) {
            JOptionPane.showMessageDialog(this, "Error exporting data to CSV: " + e.getMessage());
        }
    }
}

private void importFromCSV() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Select CSV File to Import");

    int userSelection = fileChooser.showOpenDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        java.io.File fileToOpen = fileChooser.getSelectedFile();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
            String line;
            reader.readLine(); // Skip header row

            try (Connection conn = DatabaseConnection.getConnection()) {
                String query = "INSERT INTO kontak (nama, alamat, no_telp, nama_ibu, pekerjaan, kategori) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(query);

                while ((line = reader.readLine()) != null) {
                    String[] values = line.split(",");
                    if (values.length == 6) {  // Pastikan format CSV benar
                        ps.setString(1, values[0]);
                        ps.setString(2, values[1]);
                        ps.setString(3, values[2]);
                        ps.setString(4, values[3]);
                        ps.setString(5, values[4]);
                        ps.setString(6, values[5]);

                        ps.addBatch();  // Menambahkan query untuk batch processing
                    }
                }
                ps.executeBatch(); // Eksekusi batch insert

                JOptionPane.showMessageDialog(this, "Data successfully imported from CSV.");
                loadTable(); // Refresh tabel setelah import
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error inserting data into database: " + e.getMessage());
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading CSV file: " + e.getMessage());
        }
    }
}

    
    private void buttonSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanActionPerformed
        simpanData();
    }//GEN-LAST:event_buttonSimpanActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        editData();
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        hapusData();
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void textAlamatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAlamatKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textAlamatKeyTyped

    private void textNomorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNomorKeyTyped
        char c = evt.getKeyChar();

    // Validasi: Hanya angka yang diperbolehkan
    if (!Character.isDigit(c)) {
        evt.consume(); // Batalkan input
        JOptionPane.showMessageDialog(this, 
            "Hanya angka yang diperbolehkan!", 
            "Peringatan", 
            JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_textNomorKeyTyped

    private void textNomorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNomorKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNomorKeyPressed

    private void buttonCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCariActionPerformed
        cariData();
    }//GEN-LAST:event_buttonCariActionPerformed

    private void textCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCariActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        textCari.setText(""); // Mengosongkan kolom pencarian
    tampilkanSemuaData(); // Memuat ulang semua data ke tabel
    }//GEN-LAST:event_buttonClearActionPerformed

    private void tableKontakMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableKontakMouseClicked
        int selectedRow = tableKontak.getSelectedRow();
        if (selectedRow != -1) {
        textNama.setText(tableKontak.getValueAt(selectedRow, 1).toString());
        textAlamat.setText(tableKontak.getValueAt(selectedRow, 2).toString());
        textNomor.setText(tableKontak.getValueAt(selectedRow, 3).toString());
        textIbu.setText(tableKontak.getValueAt(selectedRow, 4).toString());
        listKerja.setSelectedValue(tableKontak.getValueAt(selectedRow, 5).toString(), true);
        boxKategori.setSelectedItem(tableKontak.getValueAt(selectedRow, 6).toString());
    }
    }//GEN-LAST:event_tableKontakMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
                String tanya = "Apakah anda yakin akan keluar aplikasi?";
        boolean yakin = JOptionPane.showConfirmDialog(rootPane, tanya)==
                JOptionPane.YES_OPTION;
        if(yakin){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void buttonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportActionPerformed
        importFromCSV();
    }//GEN-LAST:event_buttonImportActionPerformed

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed
        exportToCSV();
    }//GEN-LAST:event_buttonExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplikasiKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplikasiKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplikasiKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplikasiKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplikasiKontak().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxKategori;
    private javax.swing.JButton buttonCari;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExport;
    private javax.swing.JButton buttonImport;
    private javax.swing.JButton buttonSimpan;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listKerja;
    private javax.swing.JTable tableKontak;
    private javax.swing.JTextField textAlamat;
    private javax.swing.JTextField textCari;
    private javax.swing.JTextField textIbu;
    private javax.swing.JTextField textNama;
    private javax.swing.JTextField textNomor;
    // End of variables declaration//GEN-END:variables
}
